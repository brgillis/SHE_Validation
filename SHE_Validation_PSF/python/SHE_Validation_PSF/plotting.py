""" @file plotting.py

    Created 28 April 2022

    Classes and functions to perform plotting for PSF validation tests.
"""

__updated__ = "2022-04-28"

# Copyright (C) 2012-2020 Euclid Science Ground Segment
#
# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General
# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA
import abc
from typing import Optional, Sequence

import numpy as np
from astropy.table import Table
from matplotlib import pyplot as plt

from SHE_PPT import logging
from SHE_PPT.constants.classes import BinParameters
from SHE_PPT.utility import coerce_to_list, is_inf_nan_or_masked
from SHE_Validation.binning.bin_constraints import get_table_of_ids
from SHE_Validation.plotting import ValidationPlotter
from SHE_Validation_PSF.data_processing import ESC_TF, KsResult
from SHE_Validation_PSF.file_io import PsfResSPPlotFileNamer

logger = logging.getLogger(__name__)

TITLE_FONTSIZE = 12
AXISLABEL_FONTSIZE = 12
TEXT_SIZE = 12
PLOT_FORMAT = "png"


class PsfResSPPlotter(ValidationPlotter, abc.ABC):
    """Abstract plotting class for plots generated by the PSF Residual (Star Positions) validation test.
    """

    # Fixed attributes which can be overridden by child classes
    plot_format: str = "png"

    def __init__(self,
                 star_cat: Table,
                 file_namer: PsfResSPPlotFileNamer,
                 bin_limits: Sequence[float],
                 l_ids_in_bin: Sequence[int],
                 ks_test_result: Optional[KsResult] = None):
        super().__init__(file_namer = file_namer)

        # Set attrs directly
        self.star_cat = star_cat
        self.bin_limits = bin_limits
        self.l_ids_in_bin = l_ids_in_bin
        self.ks_test_result = ks_test_result

        # Determine attrs from kwargs

        self.t_good = get_table_of_ids(t = self.star_cat,
                                       l_ids = self.l_ids_in_bin, )


class PsfResSPHistPlotter(PsfResSPPlotter):

    def plot(self):
        """ Plot histograms of p values
        """

        # Get the data we want to plot
        l_p: Sequence[float] = np.array(coerce_to_list(self.t_good[ESC_TF.p]))
        l_logp: Sequence[float] = np.log10(l_p)

        # Remove any bad values from the data
        l_logp = np.array([x for x in l_logp if not is_inf_nan_or_masked(x)])

        # Check if there's any valid data for this bin
        if len(l_logp) <= 1:
            # We'll always make the tot plot for testing purposes, but log a warning if no data
            if self.bin_parameter == BinParameters.TOT:
                logger.warning(f"Insufficient valid data to plot for {self.bin_parameter.value} test case, but making "
                               f"plot anyway for testing purposes.")
            else:
                logger.debug(f"Insufficient valid valid data to plot for {self.bin_parameter.value} test case, bin "
                             f"{self.bin_limits}, so skipping plot.")
                return

        # Set up the plot title
        plot_title: str = f"PSF Res. (Star Pos.) log(p) - {self.bin_parameter}"

        if self.bin_parameter != BinParameters.TOT:
            plot_title += f" {self.bin_limits}"

        # Make a histogram of the data

        # Set up the figure

        self.fig.subplots_adjust(wspace = 0, hspace = 0, bottom = 0.1, right = 0.95, top = 0.95, left = 0.12)

        # TODO: Plot the histogram here
        self.density_scatter(l_rr_dist, l_g1, sort = True, bins = 200, colorbar = False, s = 4)

        plt.title(plot_title, fontsize = TITLE_FONTSIZE)

        self.ax.set_xlabel(r"$\mathrm{log}_{10}(p(\chi^2,\mathrm(d.o.f.)))$", fontsize = AXISLABEL_FONTSIZE)
        self.ax.set_ylabel(f"N", fontsize = AXISLABEL_FONTSIZE)

        # Write some summary statistics
        logp_median = np.median(l_logp)
        p_median = 10 ** logp_median
        self.ax.text(0.02, 0.98, r"Median $p(\chi^2,\mathrm(d.o.f.))$: " + f"{p_median}", horizontalalignment = 'left',
                     verticalalignment = 'top',
                     transform = self.ax.transAxes, fontsize = TEXT_SIZE)
        self.ax.text(0.02, 0.93, r"$p_{\mathrm{KS}}$: " + f"{self.ks_test_result.pvalue}", horizontalalignment = 'left',
                     verticalalignment = 'top',
                     transform = self.ax.transAxes, fontsize = TEXT_SIZE)

        # Save the plot (which generates a filename) and log it
        super()._save_plot()
        logger.info(f"Saved {self.bin_parameter} {self.bin_limits} PSF Res (Star Pos.) histogram to"
                    f" {self.qualified_plot_filename}")

        plt.close()
