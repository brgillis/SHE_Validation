""" @file plotting.py

    Created 28 April 2022

    Classes and functions to perform plotting for PSF validation tests.
"""

__updated__ = "2022-04-28"

# Copyright (C) 2012-2020 Euclid Science Ground Segment
#
# This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General
# Public License as published by the Free Software Foundation; either version 3.0 of the License, or (at your option)
# any later version.
#
# This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to
# the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA
import abc
from typing import Optional, Sequence

import numpy as np
from astropy.table import Table
from matplotlib import pyplot as plt

from SHE_PPT import logging
from SHE_PPT.constants.classes import BinParameters
from SHE_PPT.utility import coerce_to_list, default_value_if_none, is_inf_nan_or_masked
from SHE_Validation.binning.bin_constraints import get_table_of_ids
from SHE_Validation.plotting import ValidationPlotter
from SHE_Validation_PSF.data_processing import ESC_TF, KsResult
from SHE_Validation_PSF.file_io import PsfResSPPlotFileNamer

STR_KS_P_LABEL = r"$p_{\mathrm{KS}}$: "

STR_HIST_TEST_P_MED_LABEL = r"Median $p(\chi^2,\mathrm(d.o.f.))$: "

STR_HIST_Y_LABEL_CUMULATIVE_TAIL = " (cumulative)"

STR_HIST_Y_LABEL_BASE = r"$N/N_{\mathrm{tot}}$"

STR_HIST_X_LABEL = r"$\mathrm{log}_{10}(p(\chi^2,\mathrm(d.o.f.)))$"

TEST_CAT_LEGEND_NAME = "Test Catalogue"

HIST_TYPE = 'step'

HIST_NUM_BINS = 20

logger = logging.getLogger(__name__)

TITLE_FONTSIZE = 12
AXISLABEL_FONTSIZE = 12
TEXT_SIZE = 12
PLOT_FORMAT = "png"

MSG_INSUFFICIENT_DATA_TOT = ("Insufficient valid data to plot for %s test case, but making "
                             "plot anyway for testing purposes.")
MSG_INSUFFICIENT_DATA = "Insufficient valid valid data to plot for %s test case, bin " \
                        "%s, so skipping plot."


class PsfResSPPlotter(ValidationPlotter, abc.ABC):
    """Abstract plotting class for plots generated by the PSF Residual (Star Positions) validation test.
    """

    # Fixed attributes which can be overridden by child classes
    plot_format: str = "png"

    def __init__(self,
                 star_cat: Table,
                 file_namer: PsfResSPPlotFileNamer,
                 bin_limits: Sequence[float],
                 l_ids_in_bin: Sequence[int],
                 ks_test_result: KsResult):
        super().__init__(file_namer = file_namer)

        # Set attrs directly
        self.star_cat = star_cat
        self.bin_limits = bin_limits
        self.l_ids_in_bin = l_ids_in_bin
        self.ks_test_result = ks_test_result

        # Determine attrs from kwargs

        self.t_good = get_table_of_ids(t = self.star_cat,
                                       l_ids = self.l_ids_in_bin, )


class PsfResSPHistPlotter(PsfResSPPlotter):
    """ Plotter for a histogram of PSF Residual (Star Pos) log10(p_chisq) values.
    """

    cumulative: bool = False

    def __init__(self,
                 *args,
                 cumulative: Optional[bool] = None,
                 **kwargs):
        """ Init that allows the user to specify here whether to plot a cumulative hist or not, or else go with the
            default.
        """

        super().__init__(*args, **kwargs)

        self.cumulative = default_value_if_none(cumulative, self.cumulative)

    def plot(self):
        """ Plot histograms of log10(p_chisq) values.
        """

        # Get the data we want to plot
        l_p: Sequence[float] = np.array(coerce_to_list(self.t_good[ESC_TF.p]))
        l_logp: Sequence[float] = np.log10(l_p)

        # Remove any bad values from the data
        l_logp = np.array([x for x in l_logp if not is_inf_nan_or_masked(x)])

        # Check if there's any valid data for this bin
        if len(l_logp) <= 1:
            # We'll always make the tot plot for testing purposes, but log a warning if no data
            if self.bin_parameter == BinParameters.TOT:
                logger.warning(MSG_INSUFFICIENT_DATA_TOT, self.bin_parameter.value)
            else:
                logger.debug(MSG_INSUFFICIENT_DATA, self.bin_parameter.value, self.bin_limits)
                return

        # Make a histogram of the data

        # Set up the figure
        self.subplots_adjust()

        # Plot the histogram
        plt.hist(l_logp,
                 bins = HIST_NUM_BINS,
                 density = True,
                 cumulative = self.cumulative,
                 histtype = HIST_TYPE,
                 label = TEST_CAT_LEGEND_NAME,
                 linestyle = '-')

        # Set the plot title
        plot_title: str = f"PSF Res. (Star Pos.) log(p) - {self.bin_parameter}"

        if self.bin_parameter != BinParameters.TOT:
            plot_title += f" {self.bin_limits}"

        plt.title(plot_title, fontsize = TITLE_FONTSIZE)

        y_label = STR_HIST_Y_LABEL_BASE
        if self.cumulative:
            y_label += STR_HIST_Y_LABEL_CUMULATIVE_TAIL

        self.ax.set_xlabel(STR_HIST_X_LABEL, fontsize = AXISLABEL_FONTSIZE)
        self.ax.set_ylabel(y_label, fontsize = AXISLABEL_FONTSIZE)

        # Write some summary statistics
        logp_median = np.median(l_logp)
        p_median = 10 ** logp_median
        self.ax.text(0.02, 0.98, STR_HIST_TEST_P_MED_LABEL + str(p_median),
                     horizontalalignment = 'left',
                     verticalalignment = 'top',
                     transform = self.ax.transAxes,
                     fontsize = TEXT_SIZE)
        self.ax.text(0.02, 0.93, STR_KS_P_LABEL + str(self.ks_test_result.pvalue),
                     horizontalalignment = 'left',
                     verticalalignment = 'top',
                     transform = self.ax.transAxes,
                     fontsize = TEXT_SIZE)

        # Save the plot (which generates a filename) and log it
        super()._save_plot()
        logger.info(f"Saved {self.bin_parameter} {self.bin_limits} PSF Res (Star Pos.) histogram to"
                    f" {self.qualified_plot_filename}")

        plt.close()
